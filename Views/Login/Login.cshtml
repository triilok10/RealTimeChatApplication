@model RealTimeChatApplication.Models.ChatUser
@{
    ViewData["Title"] = "Login";
}

@{
    if (TempData["errorMessage"] != null)
    {
        <script>
            toastr.error("@TempData["errorMessage"]");
        </script>
    }
}

@{
    if (ViewBag.ErrorMessage != null)
    {
        <text>toastr.error("@ViewBag.ErrorMessage"); </text>
    }
}

<!-- Custom Styles -->

<style>
    .containerLogin {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100%;
    }

    .custom-image-container {
        height: 100%;
        width: 100%;
    }

    .border-Danger {
        border-color: red;
    }

    .custom-image {
        object-fit: cover;
        width: 100%;
        height: 100%;
        border-top-left-radius: 0.75rem;
        border-bottom-left-radius: 0.75rem;
    }

    .tagline {
        font-size: 1.25em;
        color: #7149d2;
        background-color: #f0f0f0;
        padding: 10px;
        border-radius: 5px;
        display: inline-block;
        margin-top: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        font-weight: 800;
    }

    body {
        background-color: #f8f9fa;
    }
</style>

<body>
    <div class="containerLogin d-flex align-items-stretch">
        <div class="container my-4">
            <div class="row justify-content-center">

                <!-- Left Image Section -->
                <div class="col-md-6 d-none d-md-flex justify-content-center align-items-center p-0 custom-image-container"
                     style="background-image: url('../images/loginChat.svg'); background-size: cover; background-position: center; height:auto;">
                </div>

                <!-- Right Form Section -->
                <div class="col-md-6 bg-white border rounded-lg shadow-lg p-4 d-flex flex-column">
                    <h1 class="text-3xl font-weight-bold text-center text-dark">
                        Twisted Talk<br>
                        <small class="tagline">Fast, Friendly, and Always On.</small>
                    </h1>
                    <h2 class="h4 text-center text-muted mb-4">User Sign In</h2>
                    <p class="text-muted text-center mb-6">
                        Sign in to access your account and manage your properties.
                    </p>

                    <!-- Sign-in Form -->
                    <form asp-controller="Login" asp-action="Login" method="post" class="flex-grow-1 d-flex flex-column" onsubmit="return jsValidateSubmit()">
                        <div class="form-group">
                            <label for="username" class="text-muted">Username</label>
                            <input asp-for="UserName" class="form-control" type="text" id="username" name="username" />
                        </div>
                        <div class="form-group">
                            <label for="password" class="text-muted">Password</label>
                            <input asp-for="Password" class="form-control" type="password" id="password" name="password" />
                            <input type="hidden" asp-for="Longitude" id="Longitude" value="" />
                            <input type="hidden" asp-for="Latitude" id="Latitude" value="" />
                            <input type="hidden" asp-for="FCMToken" id="FCMToken">
                        </div>
                        <button type="submit" class="btn btn-primary btn-block mt-auto">Sign In</button>
                    </form>

                    <!-- Forgot Password and Sign Up Links -->
                    <div class="mt-4 text-center">
                        <p class="text-muted">
                            <a href="#" class="text-primary">Forgot Password?</a>
                        </p>
                        <p class="mt-2 text-muted">
                            Don't have an account?
                            <a href="@Url.Action("Register", "Login")" class="text-primary">Sign Up</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
<script type="text/javascript">

    function jsValidateSubmit() {

        var username = $("#username").val().trim();
        var password = $("#password").val().trim();

        if (!username) {
            $("#username").addClass("border-Danger");
            toastr.error("Please enter the Username");
            return false;
        } else {
            $("#username").removeClass("border-Danger");
        }

        if (!password) {
            toastr.error("Please enter the Password");
            $("#password").addClass("border-Danger");
            return false;
        } else {
            $("#email").removeClass("border-Danger");
        }
        return true;
    }


    function geoLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError, {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    function showPosition(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        document.getElementById("Latitude").value = latitude;
        document.getElementById("Longitude").value = longitude;

        console.log("Latitude: " + latitude + ", Longitude: " + longitude);
    }

    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                alert("User denied the request for Geolocation.");
                break;
            case error.POSITION_UNAVAILABLE:
                alert("Location information is unavailable.");
                break;
            case error.TIMEOUT:
                alert("The request to get user location timed out.");
                break;
            case error.UNKNOWN_ERROR:
                alert("An unknown error occurred.");
                break;
        }
    }
    window.onload = geoLocation;

</script>



<script type="module">

    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
    import { getMessaging, getToken, deleteToken } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-messaging.js";

    // Firebase configuration object
    const firebaseConfig = {
        apiKey: "AIzaSyBIWES3c3n3-JXMAwSfp1bNZQ6oZ3yQGyc",
        authDomain: "realtimechatapplication-trilok.firebaseapp.com",
        projectId: "realtimechatapplication-trilok",
        storageBucket: "realtimechatapplication-trilok.appspot.com",
        messagingSenderId: "965800671505",
        appId: "1:965800671505:web:3f3238b4bf441f8708f4b0",
        measurementId: "G-LCJX2K7LR6"
    };

    const app = initializeApp(firebaseConfig);
    const messaging = getMessaging(app);

    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/firebase-messaging-sw.js')
            .then((registration) => {
                console.log('Service Worker registered with scope:', registration.scope);
            })
            .catch((error) => {
                console.error('Service Worker registration failed:', error);
            });
    }


    async function requestNotificationPermission() {
        try {
            const permission = await Notification.requestPermission();
            if (permission === 'granted') {

                // const currentToken = await getToken(messaging, { vapidKey: "BDdcrVCClOEYjV0Cfn6MeKext7zv8tYhs4Gc8Y5X7MthCId0ccJIvCifrPtNfllC5j-qVM_rMc4l7byyq8E6ZvE" });
                // if (currentToken) {
                //     await deleteToken(messaging);
                //     console.log('Existing FCM token deleted.');
                // }


                const newToken = await getToken(messaging, { vapidKey: "BDdcrVCClOEYjV0Cfn6MeKext7zv8tYhs4Gc8Y5X7MthCId0ccJIvCifrPtNfllC5j-qVM_rMc4l7byyq8E6ZvE" });
                if (newToken) {
                    console.log('New FCM Token:', newToken);
                    document.getElementById("FCMToken").value = newToken;

                } else {
                    console.log('No new registration token available.');
                }
            } else {
                console.log('Notification permission not granted.');
            }
        } catch (err) {
            console.error('Error getting FCM token: ', err);
        }
    }

    requestNotificationPermission();
</script>