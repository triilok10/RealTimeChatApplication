@model RealTimeChatApplication.Models.ChatUser

@{
    ViewData["Title"] = "Register";
}
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/toastr.min.js"></script>
<link href="~/js/toastr.min.css" rel="stylesheet" />
<style>
    body {
        background-color: #f8f9fa;
    }

    .register-container {
        max-width: 800px;
        margin: auto;
        padding: 40px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        background-color: white;
        border-radius: 10px;
        transition: transform 0.2s;
    }

        .register-container:hover {
            transform: translateY(-5px);
        }

    h1 {
        margin-bottom: 2rem;
        font-size: 2rem;
        color: #343a40;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-control,
    .form-control-file {
        border-radius: 5px;
        border: 1px solid #ced4da;
        transition: border-color 0.3s;
    }

        .form-control:focus,
        .form-control-file:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, .5);
        }

    .profile-picture-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .profile-picture-preview {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        display: none;
        margin-bottom: 10px;
    }

    button {
        font-size: 1.1rem;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .border-Danger {
        border: 1px solid red;
    }

    .register-containerBlock {
        display: none
    }

    .containerBlockRepeat {
        display: block;
    }

    @@media (max-width: 576px) {
        .register-container {
            padding: 30px;
            width: calc(100% - 40px);
            box-shadow: none;
            border-radius: 0;
            margin-top: 20px;
            margin-bottom: 20px;
        }

        h1 {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
        }

        button {
            font-size: 1rem;
            width: 100%;
            margin-top: 10px;
            margin-bottom: 10px;
        }

        .form-group label {
            font-size: 0.9rem;
        }

        small.form-text {
            font-size: 0.8rem;
            text-align: center;
            width: 100%;
            padding-left: 10px;
            padding-right: 10px;
        }

        #my_camera {
            max-width: 100%;
            height: auto;
        }

        #captureProfileButton img {
            max-width: 50%;
            height: auto;
        }

        #captureProfileButton {
            display: flex;
            justify-content: center;
            align-items: center;
        }

</style>
<script src="~/js/webcam.min.js"></script>

<div class="register-container mt-5" id="registerContainer">
    <h1 class="text-center">Register</h1>
    <div class="container mt-5">

        <form asp-controller="Login" asp-action="Register" method="post" enctype="multipart/form-data" onsubmit="return jsValidateSubmit()">

            <div class="profile-picture-container mb-3">

                <div id="my_camera" style="width:auto; height:auto; display:none;"></div>
                <a href="javascript:void(0)" id="captureProfileButton" onclick="toggleCamera()">
                    <img src="~/images/camera-svgrepo-com.svg" style="height:50px;" />
                </a>
                <button type="button" class="btn btn-secondary mt-2" id="captureButton" style="display:none;" onclick="takeSnapshot()">Capture</button>

                <input type="hidden" asp-for="ProfilePictureURLCamera" id="ProfilePictureURLCamera">


                <input type="file" asp-for="ProfilePictureURL" accept="image" id="fileInput" onchange="loadFile(event)" style="display:none;">
                <button type="button" class="btn btn-secondary mt-2" onclick="document.getElementById('fileInput').click();">Select Profile Picture</button>

                <img id="profilePicturePreview" class="profile-picture-preview mt-2" src="" alt="Profile Picture Preview">
                <small class="form-text text-muted">Upload or capture a profile picture (optional).</small>
            </div>


            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" asp-for="UserName" class="form-control" id="username" name="username">
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" asp-for="Email" class="form-control" id="email" name="email">
            </div>

            <div class="form-group">
                <label for="email">Gender</label>
                <select asp-for="Gender" class="form-control" id="Gender">
                    <option value="0">Select Gender</option>
                    @foreach (var item in Enum.GetValues(typeof(RealTimeChatApplication.Models.ChatUser.GenderType)))
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" asp-for="Password" class="form-control" id="password" name="password">
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <input type="password" asp-for="ConfirmPassword" class="form-control" id="confirmPassword" name="confirmPassword">
            </div>

            <input type="hidden" asp-for="Longitude" id="Longitude" value="" />
            <input type="hidden" asp-for="Latitude" id="Latitude" value="" />
            <input type="hidden" asp-for="TermsCondition" id="TermsCondition" value="" />

            <div class="form-group">
                <a href="javascript:void(0)" onclick="js_TermsandCondition();"> Terms and Condition.</a>
            </div>


            <button type="submit" class="btn btn-primary btn-block">Register</button>
        </form>
    </div>

    <p class="text-center mt-3">Already have an account? <a href="@Url.Action("Login","Login")">Login here</a></p>
</div>
<div id="termsConditionContainer" style="display: none; max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; background-color: rgb(82 108 142);">
    <!-- Partial View content will be injected here -->
</div>
<script type="text/javascript">

    toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": false,
        "progressBar": false,
        "positionClass": "toast-top-right",
        "preventDuplicates": false,
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    };


    Webcam.set({
        width: 320,
        height: 240,
        image_format: 'jpeg',
        jpeg_quality: 90
    });

    function toggleCamera() {
        const cameraDiv = document.getElementById('my_camera');
        document.getElementById('captureProfileButton').style.display = 'none';
        if (cameraDiv.style.display === 'none') {
            cameraDiv.style.display = 'block';
            Webcam.attach(cameraDiv);
            document.getElementById('captureButton').style.display = 'block';
            document.getElementById('profilePicturePreview').style.display = 'none';
        } else {
            cameraDiv.style.display = 'none';
            Webcam.reset();
            document.getElementById('captureButton').style.display = 'none';
        }
    }

    function takeSnapshot() {
        Webcam.snap(function (data_uri) {

            document.getElementById('ProfilePictureURLCamera').value = data_uri;

            document.getElementById('profilePicturePreview').src = data_uri;

            document.getElementById('profilePicturePreview').style.display = 'block';

            document.getElementById('my_camera').style.display = 'none';
            Webcam.reset();
            document.getElementById('captureButton').style.display = 'none';
            document.getElementById('captureProfileButton').style.display = 'block';
        });
    }

    function loadFile(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('profilePicturePreview').src = e.target.result;
                document.getElementById('profilePicturePreview').style.display = 'block';
                document.getElementById('my_camera').style.display = 'none';
                Webcam.reset();
            }
            reader.readAsDataURL(file);
        }
    }

    function geoLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError, {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    function showPosition(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        document.getElementById("Latitude").value = latitude;
        document.getElementById("Longitude").value = longitude;

        console.log("Latitude: " + latitude + ", Longitude: " + longitude);
    }

    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                alert("User denied the request for Geolocation.");
                break;
            case error.POSITION_UNAVAILABLE:
                alert("Location information is unavailable.");
                break;
            case error.TIMEOUT:
                alert("The request to get user location timed out.");
                break;
            case error.UNKNOWN_ERROR:
                alert("An unknown error occurred.");
                break;
        }
    }
    window.onload = geoLocation;

    function jsValidateSubmit() {
        var username = $("#username").val().trim();
        var email = $("#email").val().trim();
        var password = $("#password").val().trim();
        var confirmPassword = $("#confirmPassword").val().trim();
        var gender = $("#Gender").val();
        var termsCondition = $("#TermsCondition").val();
        var passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/;

        if (!username) {
            $("#username").addClass("border-Danger");
            toastr.error("Please enter the Username");
            return false;
        } else {
            $("#username").removeClass("border-Danger");
        }

        if (!email) {
            toastr.error("Please enter the Email");
            $("#email").addClass("border-Danger");
            return false;
        } else {
            $("#email").removeClass("border-Danger");
        }

        if (gender === "0" || gender === null) {
            toastr.error("Please select a Gender");
            $("#Gender").addClass("border-Danger");
            return false;
        } else {
            $("#Gender").removeClass("border-Danger");
        }

        if (!passwordRegex.test(password)) {
            toastr.error("Password must contain at least one lowercase letter, one uppercase letter, one digit, and one special character.");
            $("#password").addClass("border-Danger");
            return false;
        } else {
            $("#password").removeClass("border-Danger");
        }


        if (!confirmPassword) {
            toastr.error("Please enter the Confirm Password");
            $("#confirmPassword").addClass("border-Danger");
            return false;
        } else {
            $("#confirmPassword").removeClass("border-Danger");
        }



        if (password !== confirmPassword) {
            toastr.error("Password and Confirm Password must be the same");
            return false;
        }

        if (termsCondition == false || termsCondition == "") {
            toastr.error("Please read the Terms and Condition");
            return false;
        }


        return true;
    }


    function js_TermsandCondition() {

        var termsValue = document.getElementById("TermsCondition").value;

        var termsValueCheck = "";
        if (termsValue == "true") {
            termsValueCheck = termsValue;
            $("#registerContainer").hide();
            $("#registerContainer").addClass("containerBlockRepeat");
        } else {
            termsValueCheck = "false";
        }

        $.ajax({
            url: "@Url.Action("_partialTermsCondition", "Login")",
            type: "GET",
            data: { termsValueCheck: termsValueCheck },
            cache: false,
            success: function (res) {
                $("#registerContainer").addClass("register-containerBlock");
                $("#termsConditionContainer").html(res).slideDown();
                document.getElementById("TermsCondition").value = true;
            }
        })

    }

</script>